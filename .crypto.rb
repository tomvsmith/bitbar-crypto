require "rubygems"
require "json"

class Crypto
  def initialize(symbol = :eth, source = :bitfinex)
    throw ArgumentError("Invalid Symbol") if ![:eth, :btc, :bch].include? symbol
    throw ArgumentError("Invalid Source") if ![:bitfinex, :kraken, :bitstamp, :cryptocompare].include? source

    @@symbol = symbol
    @@source = source
  end

  def refresh
    format(latest_price)
  end

  def logo
    case @@symbol
    when :eth
      "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpDNEVDMzI4RjkxQTkxMUU3OEIxQjk4QTU3RkQ4Rjk0MyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpDNEVDMzI5MDkxQTkxMUU3OEIxQjk4QTU3RkQ4Rjk0MyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjM1NkFBOUVDOTFBOTExRTc4QjFCOThBNTdGRDhGOTQzIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkM0RUMzMjhFOTFBOTExRTc4QjFCOThBNTdGRDhGOTQzIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8++p0g/QAAApRJREFUeNpi/P//PxMDYfAPShNUS5Rhr1690nzz5o02ksFkG/gfRMyZM2d5RkbGRjTXkmcg0HVWQNfpb9u2Tfnw4cOulLgQ7JKNGzcu4uHhYeDn52coLS2dR8iVTPi8evr06by7d+8qgwxTVFRkOHnypMzcuXNrkdWgA0Ycsfzv06dPov39/c85OTmZWVlZGVatWsXw9OlTBqB6hgsXLsgICws/xeYgJlyu27lz54zv378zKykpMTAxMTH8/v2bQVZWluHdu3cMNTU1OL2OzYX/gC6xXbp06SEODg6GO3fuMJw/f57h2rVrDEJCQgwCAgIMt27dAoWtp4ODww50R6Eb+O/z588SPT09N69fv8738uVLhufPnzOws7MzPHv2jAHoYgZBQUGGt2/fMsjJyf06cuSIspiY2BNkQzG8/OXLF6njx4/fX716NcOTJ09AGhlAsQzyNjc3N9jgnz9/MoiKil4DhrM0un4WdAGgt97n5uZutra2XgZMe0FXrlwxV1BQYPj16xcD0AAGfX3901ZWVmuB4SkCNPQjoUhhZGNjuy8hIfFBREQkqrq6ekpqamol0Nvfgd7+WVJSUhcdHT314MGDkby8vF+B+AZID8FIARHz588/ePXqVbvQ0NDmM2fOPAK6junfv3/ydXV1VUFBQSeAQWKJzVE40+GPHz8YJ02a9OL169diOjo6txYvXsywd+9eNaCXPwITvCgwbf4mNh2CxYFJ5n9ERIQvHx8fw6NHj9SAkaEGipR58+YF4DIMkoqBLsSBQa5nOHDgQFNRUdF/YNj+B4ZhF0gMKodVHz4DQZjh79+/DBUVFW+AXv309etXBqiBOPUwElFi/wMWECbAZMOiqal5glCRx0jtKgAgwABNoofc4Bjr4AAAAABJRU5ErkJggg=="
    when :btc
      "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDpERDdERkJEMTkyMzYxMUU3OTQ1OENENjcwNzk4MTA5NiIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDpERDdERkJEMjkyMzYxMUU3OTQ1OENENjcwNzk4MTA5NiI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOkREN0RGQkNGOTIzNjExRTc5NDU4Q0Q2NzA3OTgxMDk2IiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOkREN0RGQkQwOTIzNjExRTc5NDU4Q0Q2NzA3OTgxMDk2Ii8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+OSpcbAAAA+NJREFUeNqsVF1IU2EY/s6cM3X+TvcnKmrgxJ9NyqXEQggyjWIX3SR4EdVNEBRUN8NuJIKiMPAuKSkIQgKTQSZpNXJoa6jzJwNBFH/mNt3mdDp/dnrew3YYXfvBdnZ2zvu8z/u8z/tyPM+z4zzS2FVCXwDnNzY2KIM8HA43TE5OXltbW6vDbw09T09PX1OpVA69Xv8hNTXVznFcKC8vj6MTw4lyMYYSAltdXeUXFhZOezyejomJiYvRaJRlZGQwqVRKydjBwQHb3t5mEomEAXRQqVS2l5aW/iooKGDAJFJRaZxZIBDg5+bmLk1PT3eDlTo/P59eEoL3cQAaxn22QqEQ/nc4HBc0Go1hb2/vRlpamjUnJ4cX3o9R5cFKD7BXuKoLCwtZcnJyFGD8ysoKa2ho6Kqtre1FeX/UarXz8PCQFRUVMa/Xq5ydne1eX1+vJQxROyDLZmZmOpeXlzVarZZtbW2xlJSUYHFx8R2APTcYDE9QnstsNt+DBL/dbrfAAgwZEqoQ+xK3MhFwaWnp3Pj4eCOys6OjI5aUlMR2d3dPRCIRZXNzswVa+qDVG0jxBcCbYBohLUlXikHzTIuLi40iIEptIyCZTMaoEeggsUxF9kcorwjNKOvv7+/B/U10+SmYP8S7EXSfKhFITE1NXRcB0d166iaBxQ91FGzsCNwEswtDQ0NXEdQO6/BGo/FjZmbmXwKkGPxmkMEo+jAUCqnRKRY3eRy4pKTkKwD95eXlvRaLxQUpDtH9MKx12+fz6QAuxFBFkEAhMkw8pB8SCKAobRR2kgwODr4AiMFut8/v7Owo5ufnTdBYRuUmTBonAqJcD9EnH6ERDF5bRFmv8f8kAqpHRkbMfX19XQAfsFqtbjDvzM7O5gEu+BTgTC6X+8SS0f5RMDhJJdDD+vr6z9CvAzoGsrKy9ltaWp5BZ1Vubu43AFGIFobmaIIIkGxWWVnpEBlWVVW9pQdkWAAwMGqz2WzfoWthMBgsNplMHWD8AIxHkfAKzHyXmka605Vkqq6u7hEB4fofMK+NDIsJYSglHeUpwcrodDrvA0QzNjZmdblcVsz4OwyAnjpLEsEBrKamxg69hwUh46Jijg0DOBgnFU0AsgYAtIMSwxh+BwBbyW/UCOglLAwaS5jc29TU1FxRUeGkBAIgPpzf7+fB5jLGqBtMlXhR6GC8UeRTkoUOdgXD/DKMqVen092qq6v7hOVAW4xPXF9RyojmnAHgY5j4fNxj9CEwckK8s9BsGI2zlJWVjSauLxEwtsaiKFlwEoLPQq9WbJ9TAFHFFqwHIE7o/R5JftKCja05yf8L9tjOPwEGAMJcQpHtHET9AAAAAElFTkSuQmCC"
    when :bch
      "iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyRpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMy1jMDExIDY2LjE0NTY2MSwgMjAxMi8wMi8wNi0xNDo1NjoyNyAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNiAoTWFjaW50b3NoKSIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDowRTUyODZEMUJGODMxMUU3QTlFNTlGRDU2NEI4NjZBQSIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDowRTUyODZEMkJGODMxMUU3QTlFNTlGRDU2NEI4NjZBQSI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjBFNTI4NkNGQkY4MzExRTdBOUU1OUZENTY0Qjg2NkFBIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjBFNTI4NkQwQkY4MzExRTdBOUU1OUZENTY0Qjg2NkFBIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+tQ155AAABGxJREFUeNp0lF1IpGUUx59559VxxlFHHR0/MvNjRtPEdAtRNhSFTQL3qqCLYguWiKXaKKGLvdjtJuiimyL7IIIWo7uMXNYFV+hCx5Uk03UU3R0/Zxy/Hb8dZ5zpd16KKPAFned9n+f8z///P+c8prOzMzU8PKyqq6uV3+9Xk5OTKhwOq0QiodLS0lRZWZmzqakpPDY2VsB7YGtrK6O0tHSnoKBAmUwm45z8RqNRtb+/r3R1/mPVNO0qCct6enqcBJbs7Ow8zs7ODhwdHT2yWCy/Op3ObQEUoI2NDbW+vn4u4Gv83SKwaGhoKL63t5eSlZUF9lnTysrKcXp6enh7e/utxsbGm6mpqb8tLi5GBZBv/wU0m80uXddvxePxtyXz7u6uIamkpOTk4OAgxWq1qqSkJCug1tPTU9fa2lpXXV3d7dXV1c+Pj493Dw8P/wVMTk7WCfqQbG8QpJCrHA7HEuso0vzBYLAYoIqcnBwl/uGZBlD59PT0O4SHSfBFLBZTOoEmAVxaWro8MDDwAQabbTabQmaspaXle7LmVlZW3hkdHb0A82u8JwjO55wpLy9PyT4YoqqP38fCSrLZRkZGOjlo5lCCd5Pdbn/Auodcdqruzc/P3y8sLPx5eXn5YigUei8QCFSLEiwSWzIp0nXW72pUJoHZzy4sLDRmZGQo1gkk3sW3XwCcoBje2dnZmz6f7yU8djQ3N39Lsg3W/4ApiJgAfBk7ajT5iPYLkUhEiVQ2NapbznsGyV5AmQNGL6Lg/czMTB2vncQcIO+IQhj+I1csMmNNtpabmyuFeUYaUx5pUvrKA6MbNPmbyIo3NDR0dXZ2XqIPl2iNzdra2m8I7pYYKQTspA9zYF6opaSkxPjTRILQF8biDVk1Kvs0pmfV1NR0M0Wv9Pf3X/F6vbdheodp6QEoIjF/e3mK13adfyLjEYARQCzSLgIqPQcbJ9JdWBBl9NqR7sGnHyYmJlLZtxFziiiLMCUumbOz+szMTByJO4yU5eTkxKBv9BOgNG4ZoEUVFRUPmecuOsJFkX7Cu6fm5+ev8ptGryrmWyH3gPhlfW5uLs5GH0AhMuaLj8KSdZyLwcerH9AYPnYTcAyoube39z7JnpNz4rm0HmfvU5iQLvMH5SByv2bzY6kYFhgFom1WqHQljOsJ/oMpuojUfb7V0l6atJmMJ+wUKr7D7yNzW1ubFCABo98pziV8yGHDzDcTIGnj4+NXNjc3qwjaZv06LDxU1E1hDGb4G2ltbf3K4/F8SRfEze3t7QYjbo0ot0iQrG6moUiyE2AXxjxZjObzBD8BO7f4K1Jlj2rfq6qqusG3sHHbAGQ0tFym9OTd4uLiZfz8aGpq6lWZaymUJER2psiTtbCTwhH3KW3zCcOwJzjy6FRNgBTjplwulxye7OjouA7wj7TKNQ4/CVASSTzs++iGCF0xA+BnMPzz/xepXl5eLuYrkSi9x5PAuy23292Hp/dg2lBfX5/gu4tKzg4ODtrxcfS8a/4vAQYAIcOjenlet6wAAAAASUVORK5CYII="
    end
  end

  private
  def latest_price
    cur = @@symbol.to_s.upcase # :eth => "ETH"

    case @@source
    when :kraken
      res = %x(curl -s "https://api.kraken.com/0/public/Ticker?a=fetch&pair=#{cur}USD")
      res_obj = JSON.parse(res)
      price = res_obj['result']["X#{cur}ZUSD"]['a'][0]
    when :bitfinex
      res = %x(curl -s "https://api.bitfinex.com/v1/pubticker/#{cur}usd")
      res_obj = JSON.parse(res)
      price = res_obj['ask']
    when :bitstamp
      res = %x(curl -s "https://www.bitstamp.net/api/v2/ticker/#{cur}usd/")
      res_obj = JSON.parse(res)
      price = res_obj['ask']
    when :cryptocompare
      res = %x(curl -s "https://min-api.cryptocompare.com/data/price?fsym=#{cur}&tsyms=USD")
      res_obj = JSON.parse(res)
      price = res_obj['USD']
    end

    price # str
  end

  def format(amount)
    "$" + separate_comma(amount)
  end

  def separate_comma(number)
    whole, decimal = number.to_s.split(".")
    whole_with_commas = whole.chars.to_a.reverse.each_slice(3).map(&:join).join(",").reverse
  end
end
